{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","result","formData","T","TM","Tm","H","PP","VV","V","VM","handleInput","bind","handleSubmit","event","this","target","id","Number","value","setState","preventDefault","fetch","headers","method","body","JSON","stringify","then","response","json","className","onSubmit","type","onChange","step","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAIqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,OAAQ,KACRC,SAAU,CACRC,EAAG,EACHC,GAAI,EACJC,GAAI,EACJC,EAAG,EACHC,GAAI,EACJC,GAAI,EACJC,EAAG,EACHC,GAAI,IAGR,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAhBH,E,yEAmBPE,GACV,IAAMZ,EAAWa,KAAKf,MAAME,SAC5BA,EAASY,EAAME,OAAOC,IAAMC,OAAOJ,EAAME,OAAOG,OAChDJ,KAAKK,SAAS,CAAElB,e,mCAGLY,GAAQ,IAAD,OAClBA,EAAMO,iBACNC,MAAM,UAAW,CACfC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUZ,KAAKf,MAAME,YAEjC0B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAI,EAAKT,SAAS,CAC9BnB,OAAQ4B,S,+BAKV,OACE,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,kEAGA,0BAAMC,SAAUjB,KAAKF,cAEnB,oEACA,2BAAOoB,KAAK,SAASd,MAAOJ,KAAKf,MAAMG,EAAGc,GAAG,IAAIiB,SAAUnB,KAAKJ,YAAawB,KAAK,SAClF,6BAAK,6BAEL,gEACA,2BAAOF,KAAK,SAASd,MAAOJ,KAAKf,MAAMI,GAAIa,GAAG,KAAKiB,SAAUnB,KAAKJ,YAAawB,KAAK,SACpF,6BAAK,6BAEL,gEACA,2BAAOF,KAAK,SAASd,MAAOJ,KAAKf,MAAMK,GAAIY,GAAG,KAAKiB,SAAUnB,KAAKJ,YAAawB,KAAK,SACpF,6BAAK,6BAEL,sEACA,2BAAOF,KAAK,SAASd,MAAOJ,KAAKf,MAAMM,EAAGW,GAAG,IAAIiB,SAAUnB,KAAKJ,YAAawB,KAAK,SAClF,6BAAK,6BAEL,qEACA,2BAAOF,KAAK,SAASd,MAAOJ,KAAKf,MAAMO,GAAIU,GAAG,KAAKiB,SAAUnB,KAAKJ,YAAawB,KAAK,SACpF,6BAAK,6BAEL,gEACA,2BAAOF,KAAK,SAASd,MAAOJ,KAAKf,MAAMQ,GAAIS,GAAG,KAAKiB,SAAUnB,KAAKJ,YAAawB,KAAK,SACpF,6BAAK,6BAEL,kEACA,2BAAOF,KAAK,SAASd,MAAOJ,KAAKf,MAAMS,EAAGQ,GAAG,IAAIiB,SAAUnB,KAAKJ,YAAawB,KAAK,SAClF,6BAAK,6BAGL,4EACA,2BAAOF,KAAK,SAASd,MAAOJ,KAAKf,MAAMU,GAAIO,GAAG,KAAKiB,SAAUnB,KAAKJ,YAAawB,KAAK,SACpF,6BAAK,6BAEL,2BAAOF,KAAK,YAIZlB,KAAKf,MAAMC,QACX,mDAAyBc,KAAKf,MAAMC,c,GAzFfmC,IAAMC,YCQnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.8c1fbef2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: null,\n      formData: {\n        T: 0,\n        TM: 0,\n        Tm: 0,\n        H: 0,\n        PP: 0,\n        VV: 0,\n        V: 0,\n        VM: 0\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleInput(event) {\n    const formData = this.state.formData;\n    formData[event.target.id] = Number(event.target.value);\n    this.setState({ formData });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    fetch('predict', {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(this.state.formData)\n    })\n    .then(response => response.json())\n    .then(response => this.setState({\n      result: response\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Fill climate data and click submit.\n        </p>\n          <form onSubmit={this.handleSubmit}>\n\n            <label>Enter Average Temperature (&deg;C)</label>\n            <input type='number' value={this.state.T} id='T' onChange={this.handleInput} step=\"0.01\"/>\n            <br/><br/>\n            \n            <label>Enter Max Temperature (&deg;C)</label>\n            <input type='number' value={this.state.TM} id='TM' onChange={this.handleInput} step=\"0.01\"/>\n            <br/><br/>\n\n            <label>Enter Min Temperature (&deg;C)</label>\n            <input type='number' value={this.state.Tm} id='Tm' onChange={this.handleInput} step=\"0.01\"/>\n            <br/><br/>\n\n            <label>Enter Average Relative Humidity (%)</label>\n            <input type='number' value={this.state.H} id='H' onChange={this.handleInput} step=\"0.01\"/>\n            <br/><br/>\n\n            <label>Enter Total Rainfall/Snowmelt (mm)</label>\n            <input type='number' value={this.state.PP} id='PP' onChange={this.handleInput} step=\"0.01\"/>\n            <br/><br/>\n\n            <label>Enter Average Visibility (km)</label>\n            <input type='number' value={this.state.VV} id='VV' onChange={this.handleInput} step=\"0.01\"/>\n            <br/><br/>\n\n            <label>Enter Average Wind Speed (km/h)</label>\n            <input type='number' value={this.state.V} id='V' onChange={this.handleInput} step=\"0.01\"/>\n            <br/><br/>\n\n\n            <label>Enter Maximum Sustained Wind Speed (km/h)</label>\n            <input type='number' value={this.state.VM} id='VM' onChange={this.handleInput} step=\"0.01\"/>\n            <br/><br/>\n\n            <input type='submit' />\n\n          </form>\n          {\n            this.state.result && \n            <div>AQI Prediction is: {this.state.result}</div>\n          }\n        </header>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}